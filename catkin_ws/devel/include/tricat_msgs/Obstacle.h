// Generated by gencpp from file tricat_msgs/Obstacle.msg
// DO NOT EDIT!


#ifndef TRICAT_MSGS_MESSAGE_OBSTACLE_H
#define TRICAT_MSGS_MESSAGE_OBSTACLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace tricat_msgs
{
template <class ContainerAllocator>
struct Obstacle_
{
  typedef Obstacle_<ContainerAllocator> Type;

  Obstacle_()
    : begin()
    , end()  {
    }
  Obstacle_(const ContainerAllocator& _alloc)
    : begin(_alloc)
    , end(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _begin_type;
  _begin_type begin;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _end_type;
  _end_type end;





  typedef boost::shared_ptr< ::tricat_msgs::Obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tricat_msgs::Obstacle_<ContainerAllocator> const> ConstPtr;

}; // struct Obstacle_

typedef ::tricat_msgs::Obstacle_<std::allocator<void> > Obstacle;

typedef boost::shared_ptr< ::tricat_msgs::Obstacle > ObstaclePtr;
typedef boost::shared_ptr< ::tricat_msgs::Obstacle const> ObstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tricat_msgs::Obstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tricat_msgs::Obstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tricat_msgs::Obstacle_<ContainerAllocator1> & lhs, const ::tricat_msgs::Obstacle_<ContainerAllocator2> & rhs)
{
  return lhs.begin == rhs.begin &&
    lhs.end == rhs.end;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tricat_msgs::Obstacle_<ContainerAllocator1> & lhs, const ::tricat_msgs::Obstacle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tricat_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tricat_msgs::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tricat_msgs::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tricat_msgs::Obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tricat_msgs::Obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tricat_msgs::Obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tricat_msgs::Obstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tricat_msgs::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41e958a799f3b38d26f0715b99f1cec2";
  }

  static const char* value(const ::tricat_msgs::Obstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41e958a799f3b38dULL;
  static const uint64_t static_value2 = 0x26f0715b99f1cec2ULL;
};

template<class ContainerAllocator>
struct DataType< ::tricat_msgs::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tricat_msgs/Obstacle";
  }

  static const char* value(const ::tricat_msgs::Obstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tricat_msgs::Obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point begin\n"
"geometry_msgs/Point end\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::tricat_msgs::Obstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tricat_msgs::Obstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.begin);
      stream.next(m.end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tricat_msgs::Obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tricat_msgs::Obstacle_<ContainerAllocator>& v)
  {
    s << indent << "begin: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.begin);
    s << indent << "end: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.end);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRICAT_MSGS_MESSAGE_OBSTACLE_H
