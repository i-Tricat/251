// Generated by gencpp from file tricat_msgs/WaypointServiceResponse.msg
// DO NOT EDIT!


#ifndef TRICAT_MSGS_MESSAGE_WAYPOINTSERVICERESPONSE_H
#define TRICAT_MSGS_MESSAGE_WAYPOINTSERVICERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tricat_msgs/WPList.h>

namespace tricat_msgs
{
template <class ContainerAllocator>
struct WaypointServiceResponse_
{
  typedef WaypointServiceResponse_<ContainerAllocator> Type;

  WaypointServiceResponse_()
    : waypoint_list()  {
    }
  WaypointServiceResponse_(const ContainerAllocator& _alloc)
    : waypoint_list(_alloc)  {
  (void)_alloc;
    }



   typedef  ::tricat_msgs::WPList_<ContainerAllocator>  _waypoint_list_type;
  _waypoint_list_type waypoint_list;





  typedef boost::shared_ptr< ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointServiceResponse_

typedef ::tricat_msgs::WaypointServiceResponse_<std::allocator<void> > WaypointServiceResponse;

typedef boost::shared_ptr< ::tricat_msgs::WaypointServiceResponse > WaypointServiceResponsePtr;
typedef boost::shared_ptr< ::tricat_msgs::WaypointServiceResponse const> WaypointServiceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator1> & lhs, const ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.waypoint_list == rhs.waypoint_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator1> & lhs, const ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tricat_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bbca728dc1a971940e618ed2a281f3e2";
  }

  static const char* value(const ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbbca728dc1a97194ULL;
  static const uint64_t static_value2 = 0x0e618ed2a281f3e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tricat_msgs/WaypointServiceResponse";
  }

  static const char* value(const ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Response\n"
"WPList waypoint_list\n"
"\n"
"================================================================================\n"
"MSG: tricat_msgs/WPList\n"
"std_msgs/Header header\n"
"tricat_msgs/WP[] WP_data\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: tricat_msgs/WP\n"
"std_msgs/Float64 x\n"
"std_msgs/Float64 y\n"
"std_msgs/String type\n"
"std_msgs/UInt16 num\n"
"std_msgs/UInt16 range\n"
"std_msgs/Bool arrive\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt16\n"
"uint16 data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.waypoint_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointServiceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tricat_msgs::WaypointServiceResponse_<ContainerAllocator>& v)
  {
    s << indent << "waypoint_list: ";
    s << std::endl;
    Printer< ::tricat_msgs::WPList_<ContainerAllocator> >::stream(s, indent + "  ", v.waypoint_list);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRICAT_MSGS_MESSAGE_WAYPOINTSERVICERESPONSE_H
