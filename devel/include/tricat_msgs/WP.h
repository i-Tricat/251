// Generated by gencpp from file tricat_msgs/WP.msg
// DO NOT EDIT!


#ifndef TRICAT_MSGS_MESSAGE_WP_H
#define TRICAT_MSGS_MESSAGE_WP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/String.h>
#include <std_msgs/UInt16.h>
#include <std_msgs/UInt16.h>
#include <std_msgs/Bool.h>

namespace tricat_msgs
{
template <class ContainerAllocator>
struct WP_
{
  typedef WP_<ContainerAllocator> Type;

  WP_()
    : x()
    , y()
    , type()
    , num()
    , range()
    , arrive()  {
    }
  WP_(const ContainerAllocator& _alloc)
    : x(_alloc)
    , y(_alloc)
    , type(_alloc)
    , num(_alloc)
    , range(_alloc)
    , arrive(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float64_<ContainerAllocator>  _x_type;
  _x_type x;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _y_type;
  _y_type y;

   typedef  ::std_msgs::String_<ContainerAllocator>  _type_type;
  _type_type type;

   typedef  ::std_msgs::UInt16_<ContainerAllocator>  _num_type;
  _num_type num;

   typedef  ::std_msgs::UInt16_<ContainerAllocator>  _range_type;
  _range_type range;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _arrive_type;
  _arrive_type arrive;





  typedef boost::shared_ptr< ::tricat_msgs::WP_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tricat_msgs::WP_<ContainerAllocator> const> ConstPtr;

}; // struct WP_

typedef ::tricat_msgs::WP_<std::allocator<void> > WP;

typedef boost::shared_ptr< ::tricat_msgs::WP > WPPtr;
typedef boost::shared_ptr< ::tricat_msgs::WP const> WPConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tricat_msgs::WP_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tricat_msgs::WP_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tricat_msgs::WP_<ContainerAllocator1> & lhs, const ::tricat_msgs::WP_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.type == rhs.type &&
    lhs.num == rhs.num &&
    lhs.range == rhs.range &&
    lhs.arrive == rhs.arrive;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tricat_msgs::WP_<ContainerAllocator1> & lhs, const ::tricat_msgs::WP_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tricat_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tricat_msgs::WP_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tricat_msgs::WP_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tricat_msgs::WP_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tricat_msgs::WP_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tricat_msgs::WP_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tricat_msgs::WP_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tricat_msgs::WP_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e86d166212e6ad49f8865c7a6bb74d08";
  }

  static const char* value(const ::tricat_msgs::WP_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe86d166212e6ad49ULL;
  static const uint64_t static_value2 = 0xf8865c7a6bb74d08ULL;
};

template<class ContainerAllocator>
struct DataType< ::tricat_msgs::WP_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tricat_msgs/WP";
  }

  static const char* value(const ::tricat_msgs::WP_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tricat_msgs::WP_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float64 x\n"
"std_msgs/Float64 y\n"
"std_msgs/String type\n"
"std_msgs/UInt16 num\n"
"std_msgs/UInt16 range\n"
"std_msgs/Bool arrive\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/UInt16\n"
"uint16 data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::tricat_msgs::WP_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tricat_msgs::WP_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.type);
      stream.next(m.num);
      stream.next(m.range);
      stream.next(m.arrive);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WP_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tricat_msgs::WP_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tricat_msgs::WP_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.y);
    s << indent << "type: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
    s << indent << "num: ";
    s << std::endl;
    Printer< ::std_msgs::UInt16_<ContainerAllocator> >::stream(s, indent + "  ", v.num);
    s << indent << "range: ";
    s << std::endl;
    Printer< ::std_msgs::UInt16_<ContainerAllocator> >::stream(s, indent + "  ", v.range);
    s << indent << "arrive: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.arrive);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRICAT_MSGS_MESSAGE_WP_H
